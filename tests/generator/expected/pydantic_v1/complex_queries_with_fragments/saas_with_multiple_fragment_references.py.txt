"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from enum import Enum  # noqa: F401 # pylint: disable=W0611
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Callable,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)

from tests.generator.definitions.complex_queries_with_fragments.vault_secret_fragment import VaultSecret


DEFINITION = """
fragment VaultSecret on VaultSecret_v1 {
  path
  field
  version
  format
}


query SaasFilesV2XXL {
  saas_files: saas_files_v2 {
    path
    name
    pipelinesProvider {
      name
      provider
      ...on PipelinesProviderTekton_v1 {
        namespace {
          name
          cluster {
            name
            jumpHost {
              hostname
              identity {
                ... VaultSecret
              }
            }
            automationToken {
              ... VaultSecret
            }
          }
        }
      }
    }
    slack {
      output
      workspace {
        name
        integrations {
          name
          token {
            ... VaultSecret
          }
          channel
          icon_emoji
          username
        }
      }
      channel
      notifications {
        start
      }
    }
  }
}

"""


class PipelinesProviderV1(BaseModel):
    name: str = Field(..., alias="name")
    provider: str = Field(..., alias="provider")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterJumpHostV1(BaseModel):
    hostname: str = Field(..., alias="hostname")
    identity: VaultSecret = Field(..., alias="identity")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterV1(BaseModel):
    name: str = Field(..., alias="name")
    jump_host: Optional[ClusterJumpHostV1] = Field(..., alias="jumpHost")
    automation_token: Optional[VaultSecret] = Field(..., alias="automationToken")

    class Config:
        smart_union = True
        extra = Extra.forbid


class NamespaceV1(BaseModel):
    name: str = Field(..., alias="name")
    cluster: ClusterV1 = Field(..., alias="cluster")

    class Config:
        smart_union = True
        extra = Extra.forbid


class PipelinesProviderTektonV1(PipelinesProviderV1):
    namespace: NamespaceV1 = Field(..., alias="namespace")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SlackWorkspaceIntegrationV1(BaseModel):
    name: str = Field(..., alias="name")
    token: VaultSecret = Field(..., alias="token")
    channel: str = Field(..., alias="channel")
    icon_emoji: str = Field(..., alias="icon_emoji")
    username: str = Field(..., alias="username")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SlackWorkspaceV1(BaseModel):
    name: str = Field(..., alias="name")
    integrations: Optional[list[Optional[SlackWorkspaceIntegrationV1]]] = Field(..., alias="integrations")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SlackOutputNotificationsV1(BaseModel):
    start: Optional[bool] = Field(..., alias="start")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SlackOutputV1(BaseModel):
    output: Optional[str] = Field(..., alias="output")
    workspace: SlackWorkspaceV1 = Field(..., alias="workspace")
    channel: Optional[str] = Field(..., alias="channel")
    notifications: Optional[SlackOutputNotificationsV1] = Field(..., alias="notifications")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasFileV2(BaseModel):
    path: str = Field(..., alias="path")
    name: str = Field(..., alias="name")
    pipelines_provider: Union[PipelinesProviderTektonV1, PipelinesProviderV1] = Field(..., alias="pipelinesProvider")
    slack: Optional[SlackOutputV1] = Field(..., alias="slack")

    class Config:
        smart_union = True
        extra = Extra.forbid


class SaasFilesV2XXLQueryData(BaseModel):
    saas_files: Optional[list[Optional[SaasFileV2]]] = Field(..., alias="saas_files")

    class Config:
        smart_union = True
        extra = Extra.forbid


def query(query_func: Callable, **kwargs) -> SaasFilesV2XXLQueryData:
    """
    This is a convenience function which queries and parses the data into
    concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        query_func (Callable): Function which queries your GQL Server
        kwargs: optional arguments that will be passed to the query function

    Returns:
        SaasFilesV2XXLQueryData: queried data parsed into generated classes
    """
    raw_data: dict[Any, Any] = query_func(DEFINITION, **kwargs)
    return SaasFilesV2XXLQueryData(**raw_data)
