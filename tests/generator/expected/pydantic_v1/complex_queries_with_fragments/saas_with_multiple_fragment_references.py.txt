"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from collections.abc import Callable  # noqa: F401 # pylint: disable=W0611
from datetime import datetime  # noqa: F401 # pylint: disable=W0611
from enum import Enum  # noqa: F401 # pylint: disable=W0611
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)

from tests.generator.definitions.complex_queries_with_fragments.vault_secret_fragment import VaultSecret


DEFINITION = """
fragment VaultSecret on VaultSecret_v1 {
  path
  field
  version
  format
}


query SaasFilesV2XXL {
  saas_files: saas_files_v2 {
    path
    name
    pipelinesProvider {
      name
      provider
      ...on PipelinesProviderTekton_v1 {
        namespace {
          name
          cluster {
            name
            jumpHost {
              hostname
              identity {
                ... VaultSecret
              }
            }
            automationToken {
              ... VaultSecret
            }
          }
        }
      }
    }
    slack {
      output
      workspace {
        name
        integrations {
          name
          token {
            ... VaultSecret
          }
          channel
          icon_emoji
          username
        }
      }
      channel
      notifications {
        start
      }
    }
  }
}

"""


class BaseModelWithConfig(BaseModel):
    class Config:
        smart_union=True
        extra=Extra.forbid


class PipelinesProviderV1(BaseModelWithConfig):
    name: str = Field(..., alias="name")
    provider: str = Field(..., alias="provider")


class ClusterJumpHostV1(BaseModelWithConfig):
    hostname: str = Field(..., alias="hostname")
    identity: VaultSecret = Field(..., alias="identity")


class ClusterV1(BaseModelWithConfig):
    name: str = Field(..., alias="name")
    jump_host: Optional[ClusterJumpHostV1] = Field(..., alias="jumpHost")
    automation_token: Optional[VaultSecret] = Field(..., alias="automationToken")


class NamespaceV1(BaseModelWithConfig):
    name: str = Field(..., alias="name")
    cluster: ClusterV1 = Field(..., alias="cluster")


class PipelinesProviderTektonV1(PipelinesProviderV1):
    namespace: NamespaceV1 = Field(..., alias="namespace")


class SlackWorkspaceIntegrationV1(BaseModelWithConfig):
    name: str = Field(..., alias="name")
    token: VaultSecret = Field(..., alias="token")
    channel: str = Field(..., alias="channel")
    icon_emoji: str = Field(..., alias="icon_emoji")
    username: str = Field(..., alias="username")


class SlackWorkspaceV1(BaseModelWithConfig):
    name: str = Field(..., alias="name")
    integrations: Optional[list[Optional[SlackWorkspaceIntegrationV1]]] = Field(..., alias="integrations")


class SlackOutputNotificationsV1(BaseModelWithConfig):
    start: Optional[bool] = Field(..., alias="start")


class SlackOutputV1(BaseModelWithConfig):
    output: Optional[str] = Field(..., alias="output")
    workspace: SlackWorkspaceV1 = Field(..., alias="workspace")
    channel: Optional[str] = Field(..., alias="channel")
    notifications: Optional[SlackOutputNotificationsV1] = Field(..., alias="notifications")


class SaasFileV2(BaseModelWithConfig):
    path: str = Field(..., alias="path")
    name: str = Field(..., alias="name")
    pipelines_provider: Union[PipelinesProviderTektonV1, PipelinesProviderV1] = Field(..., alias="pipelinesProvider")
    slack: Optional[SlackOutputV1] = Field(..., alias="slack")


class SaasFilesV2XXLQueryData(BaseModelWithConfig):
    saas_files: Optional[list[Optional[SaasFileV2]]] = Field(..., alias="saas_files")


def query(query_func: Callable, **kwargs: Any) -> SaasFilesV2XXLQueryData:
    """
    This is a convenience function which queries and parses the data into
    concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        query_func (Callable): Function which queries your GQL Server
        kwargs: optional arguments that will be passed to the query function

    Returns:
        SaasFilesV2XXLQueryData: queried data parsed into generated classes
    """
    raw_data: dict[Any, Any] = query_func(DEFINITION, **kwargs)
    return SaasFilesV2XXLQueryData(**raw_data)
