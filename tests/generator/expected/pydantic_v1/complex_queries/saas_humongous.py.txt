"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from collections.abc import Callable  # noqa: F401 # pylint: disable=W0611
from datetime import datetime  # noqa: F401 # pylint: disable=W0611
from enum import Enum  # noqa: F401 # pylint: disable=W0611
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)


DEFINITION = """
query SaasFilesV2XXL {
  saas_files: saas_files_v2 {
    path
    name
    app {
      name
    }
    pipelinesProvider {
      name
      provider
      ...on PipelinesProviderTekton_v1 {
        namespace {
          name
          cluster {
            name
            consoleUrl
            serverUrl
            insecureSkipTLSVerify
            jumpHost {
              hostname
              knownHosts
              user
              port
              identity {
                path
                field
                version
                format
              }
            }
            automationToken {
              path
              field
              version
              format
            }
            internal
            disable {
              integrations
            }
          }
        }
        defaults {
          pipelineTemplates {
            openshiftSaasDeploy {
              name
            }
          }
        }
        pipelineTemplates {
          openshiftSaasDeploy {
            name
          }
        }
      }
    }
    deployResources {
      requests {
        cpu
        memory
      }
      limits {
        cpu
        memory
      }
    }
    slack {
      output
      workspace {
        name
        integrations {
          name
          token {
            path
            field
            version
            format
          }
          channel
          icon_emoji
          username
        }
      }
      channel
      notifications {
        start
      }
    }
    managedResourceTypes
    takeover
    compare
    publishJobLogs
    clusterAdmin
    imagePatterns
    use_channel_in_image_tag
    authentication {
      code {
        path
        field
        version
        format
      }
      image {
        path
        field
        version
        format
      }
    }
    parameters
    secretParameters {
      name
      secret {
        path
        field
        version
        format
      }
    }
    resourceTemplates {
      name
      url
      path
      provider
      hash_length
      parameters
      secretParameters {
        name
        secret {
          path
          field
          version
          format
        }
      }
      targets {
        namespace {
          name
          environment {
            name
            parameters
            secretParameters {
              name
              secret {
                path
                field
                version
                format
              }
            }
          }
          app {
            name
          }
          cluster {
            name
            serverUrl
            insecureSkipTLSVerify
            jumpHost {
                hostname
                knownHosts
                user
                port
                identity {
                  path
                  field
                  version
                  format
                }
            }
            automationToken {
              path
              field
              version
              format
            }
            clusterAdminAutomationToken {
              path
              field
              version
              format
            }
            internal
            disable {
              integrations
            }
          }
        }
        ref
        promotion {
          auto
          publish
          subscribe
          promotion_data {
            channel
            data {
              type
              ... on ParentSaasPromotion_v1 {
                parent_saas
                target_config_hash
              }
            }
          }
        }
        parameters
        secretParameters {
          name
          secret {
            path
            field
            version
            format
          }
        }
        upstream {
          instance {
            name
            serverUrl
          }
          name
        }
        disable
        delete
      }
    }
    roles {
      users {
        org_username
        tag_on_merge_requests
      }
    }
  }
}

"""


class ConfiguredBaseModel(BaseModel):
    class Config:
        smart_union=True
        extra=Extra.forbid
        allow_population_by_field_name=True


class AppV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")


class PipelinesProviderV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    provider: str = Field(..., alias="provider")


class VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class ClusterJumpHostV1(ConfiguredBaseModel):
    hostname: str = Field(..., alias="hostname")
    known_hosts: str = Field(..., alias="knownHosts")
    user: str = Field(..., alias="user")
    port: Optional[int] = Field(..., alias="port")
    identity: VaultSecretV1 = Field(..., alias="identity")


class ClusterV1_VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class DisableClusterAutomationsV1(ConfiguredBaseModel):
    integrations: Optional[list[Optional[str]]] = Field(..., alias="integrations")


class ClusterV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    console_url: str = Field(..., alias="consoleUrl")
    server_url: str = Field(..., alias="serverUrl")
    insecure_skip_tls_verify: Optional[bool] = Field(..., alias="insecureSkipTLSVerify")
    jump_host: Optional[ClusterJumpHostV1] = Field(..., alias="jumpHost")
    automation_token: Optional[ClusterV1_VaultSecretV1] = Field(..., alias="automationToken")
    internal: Optional[bool] = Field(..., alias="internal")
    disable: Optional[DisableClusterAutomationsV1] = Field(..., alias="disable")


class NamespaceV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    cluster: ClusterV1 = Field(..., alias="cluster")


class PipelinesProviderTektonObjectTemplateV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")


class PipelinesProviderPipelineTemplatesV1(ConfiguredBaseModel):
    openshift_saas_deploy: PipelinesProviderTektonObjectTemplateV1 = Field(..., alias="openshiftSaasDeploy")


class PipelinesProviderTektonProviderDefaultsV1(ConfiguredBaseModel):
    pipeline_templates: PipelinesProviderPipelineTemplatesV1 = Field(..., alias="pipelineTemplates")


class PipelinesProviderTektonV1_PipelinesProviderPipelineTemplatesV1_PipelinesProviderTektonObjectTemplateV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")


class PipelinesProviderTektonV1_PipelinesProviderPipelineTemplatesV1(ConfiguredBaseModel):
    openshift_saas_deploy: PipelinesProviderTektonV1_PipelinesProviderPipelineTemplatesV1_PipelinesProviderTektonObjectTemplateV1 = Field(..., alias="openshiftSaasDeploy")


class PipelinesProviderTektonV1(PipelinesProviderV1):
    namespace: NamespaceV1 = Field(..., alias="namespace")
    defaults: PipelinesProviderTektonProviderDefaultsV1 = Field(..., alias="defaults")
    pipeline_templates: Optional[PipelinesProviderTektonV1_PipelinesProviderPipelineTemplatesV1] = Field(..., alias="pipelineTemplates")


class ResourceRequirementsV1(ConfiguredBaseModel):
    cpu: str = Field(..., alias="cpu")
    memory: str = Field(..., alias="memory")


class DeployResourcesV1_ResourceRequirementsV1(ConfiguredBaseModel):
    cpu: str = Field(..., alias="cpu")
    memory: str = Field(..., alias="memory")


class DeployResourcesV1(ConfiguredBaseModel):
    requests: ResourceRequirementsV1 = Field(..., alias="requests")
    limits: DeployResourcesV1_ResourceRequirementsV1 = Field(..., alias="limits")


class SlackWorkspaceIntegrationV1_VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class SlackWorkspaceIntegrationV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    token: SlackWorkspaceIntegrationV1_VaultSecretV1 = Field(..., alias="token")
    channel: str = Field(..., alias="channel")
    icon_emoji: str = Field(..., alias="icon_emoji")
    username: str = Field(..., alias="username")


class SlackWorkspaceV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    integrations: Optional[list[Optional[SlackWorkspaceIntegrationV1]]] = Field(..., alias="integrations")


class SlackOutputNotificationsV1(ConfiguredBaseModel):
    start: Optional[bool] = Field(..., alias="start")


class SlackOutputV1(ConfiguredBaseModel):
    output: Optional[str] = Field(..., alias="output")
    workspace: SlackWorkspaceV1 = Field(..., alias="workspace")
    channel: Optional[str] = Field(..., alias="channel")
    notifications: Optional[SlackOutputNotificationsV1] = Field(..., alias="notifications")


class SaasFileAuthenticationV1_VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class SaasFileV2_SaasFileAuthenticationV1_VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class SaasFileAuthenticationV1(ConfiguredBaseModel):
    code: Optional[SaasFileAuthenticationV1_VaultSecretV1] = Field(..., alias="code")
    image: Optional[SaasFileV2_SaasFileAuthenticationV1_VaultSecretV1] = Field(..., alias="image")


class SaasSecretParametersV1_VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class SaasSecretParametersV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    secret: SaasSecretParametersV1_VaultSecretV1 = Field(..., alias="secret")


class SaasResourceTemplateV2_SaasSecretParametersV1_VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class SaasResourceTemplateV2_SaasSecretParametersV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    secret: SaasResourceTemplateV2_SaasSecretParametersV1_VaultSecretV1 = Field(..., alias="secret")


class EnvironmentV1_SaasSecretParametersV1_VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class EnvironmentV1_SaasSecretParametersV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    secret: EnvironmentV1_SaasSecretParametersV1_VaultSecretV1 = Field(..., alias="secret")


class EnvironmentV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    parameters: Optional[Json] = Field(..., alias="parameters")
    secret_parameters: Optional[list[Optional[EnvironmentV1_SaasSecretParametersV1]]] = Field(..., alias="secretParameters")


class SaasResourceTemplateTargetV2_NamespaceV1_AppV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")


class SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_ClusterJumpHostV1_VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_ClusterJumpHostV1(ConfiguredBaseModel):
    hostname: str = Field(..., alias="hostname")
    known_hosts: str = Field(..., alias="knownHosts")
    user: str = Field(..., alias="user")
    port: Optional[int] = Field(..., alias="port")
    identity: SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_ClusterJumpHostV1_VaultSecretV1 = Field(..., alias="identity")


class SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class SaasResourceTemplateTargetV2_NamespaceV1_SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_DisableClusterAutomationsV1(ConfiguredBaseModel):
    integrations: Optional[list[Optional[str]]] = Field(..., alias="integrations")


class SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    server_url: str = Field(..., alias="serverUrl")
    insecure_skip_tls_verify: Optional[bool] = Field(..., alias="insecureSkipTLSVerify")
    jump_host: Optional[SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_ClusterJumpHostV1] = Field(..., alias="jumpHost")
    automation_token: Optional[SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_VaultSecretV1] = Field(..., alias="automationToken")
    cluster_admin_automation_token: Optional[SaasResourceTemplateTargetV2_NamespaceV1_SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_VaultSecretV1] = Field(..., alias="clusterAdminAutomationToken")
    internal: Optional[bool] = Field(..., alias="internal")
    disable: Optional[SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1_DisableClusterAutomationsV1] = Field(..., alias="disable")


class SaasResourceTemplateTargetV2_NamespaceV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    environment: EnvironmentV1 = Field(..., alias="environment")
    app: SaasResourceTemplateTargetV2_NamespaceV1_AppV1 = Field(..., alias="app")
    cluster: SaasResourceTemplateTargetV2_NamespaceV1_ClusterV1 = Field(..., alias="cluster")


class PromotionChannelDataV1(ConfiguredBaseModel):
    q_type: str = Field(..., alias="type")


class ParentSaasPromotionV1(PromotionChannelDataV1):
    parent_saas: Optional[str] = Field(..., alias="parent_saas")
    target_config_hash: Optional[str] = Field(..., alias="target_config_hash")


class PromotionDataV1(ConfiguredBaseModel):
    channel: Optional[str] = Field(..., alias="channel")
    data: Optional[list[Optional[Union[ParentSaasPromotionV1, PromotionChannelDataV1]]]] = Field(..., alias="data")


class SaasResourceTemplateTargetPromotionV1(ConfiguredBaseModel):
    auto: Optional[bool] = Field(..., alias="auto")
    publish: Optional[list[Optional[str]]] = Field(..., alias="publish")
    subscribe: Optional[list[Optional[str]]] = Field(..., alias="subscribe")
    promotion_data: Optional[list[Optional[PromotionDataV1]]] = Field(..., alias="promotion_data")


class SaasResourceTemplateTargetV2_SaasSecretParametersV1_VaultSecretV1(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    field: str = Field(..., alias="field")
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")


class SaasResourceTemplateTargetV2_SaasSecretParametersV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    secret: SaasResourceTemplateTargetV2_SaasSecretParametersV1_VaultSecretV1 = Field(..., alias="secret")


class JenkinsInstanceV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    server_url: str = Field(..., alias="serverUrl")


class SaasResourceTemplateTargetUpstreamV1(ConfiguredBaseModel):
    instance: JenkinsInstanceV1 = Field(..., alias="instance")
    name: str = Field(..., alias="name")


class SaasResourceTemplateTargetV2(ConfiguredBaseModel):
    namespace: SaasResourceTemplateTargetV2_NamespaceV1 = Field(..., alias="namespace")
    ref: str = Field(..., alias="ref")
    promotion: Optional[SaasResourceTemplateTargetPromotionV1] = Field(..., alias="promotion")
    parameters: Optional[Json] = Field(..., alias="parameters")
    secret_parameters: Optional[list[Optional[SaasResourceTemplateTargetV2_SaasSecretParametersV1]]] = Field(..., alias="secretParameters")
    upstream: Optional[SaasResourceTemplateTargetUpstreamV1] = Field(..., alias="upstream")
    disable: Optional[bool] = Field(..., alias="disable")
    delete: Optional[bool] = Field(..., alias="delete")


class SaasResourceTemplateV2(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    url: str = Field(..., alias="url")
    path: str = Field(..., alias="path")
    provider: Optional[str] = Field(..., alias="provider")
    hash_length: Optional[int] = Field(..., alias="hash_length")
    parameters: Optional[Json] = Field(..., alias="parameters")
    secret_parameters: Optional[list[Optional[SaasResourceTemplateV2_SaasSecretParametersV1]]] = Field(..., alias="secretParameters")
    targets: Optional[list[SaasResourceTemplateTargetV2]] = Field(..., alias="targets")


class UserV1(ConfiguredBaseModel):
    org_username: str = Field(..., alias="org_username")
    tag_on_merge_requests: Optional[bool] = Field(..., alias="tag_on_merge_requests")


class RoleV1(ConfiguredBaseModel):
    users: Optional[list[Optional[UserV1]]] = Field(..., alias="users")


class SaasFileV2(ConfiguredBaseModel):
    path: str = Field(..., alias="path")
    name: str = Field(..., alias="name")
    app: AppV1 = Field(..., alias="app")
    pipelines_provider: Union[PipelinesProviderTektonV1, PipelinesProviderV1] = Field(..., alias="pipelinesProvider")
    deploy_resources: Optional[DeployResourcesV1] = Field(..., alias="deployResources")
    slack: Optional[SlackOutputV1] = Field(..., alias="slack")
    managed_resource_types: Optional[list[str]] = Field(..., alias="managedResourceTypes")
    takeover: Optional[bool] = Field(..., alias="takeover")
    compare: Optional[bool] = Field(..., alias="compare")
    publish_job_logs: Optional[bool] = Field(..., alias="publishJobLogs")
    cluster_admin: Optional[bool] = Field(..., alias="clusterAdmin")
    image_patterns: Optional[list[str]] = Field(..., alias="imagePatterns")
    use_channel_in_image_tag: Optional[bool] = Field(..., alias="use_channel_in_image_tag")
    authentication: Optional[SaasFileAuthenticationV1] = Field(..., alias="authentication")
    parameters: Optional[Json] = Field(..., alias="parameters")
    secret_parameters: Optional[list[Optional[SaasSecretParametersV1]]] = Field(..., alias="secretParameters")
    resource_templates: Optional[list[SaasResourceTemplateV2]] = Field(..., alias="resourceTemplates")
    roles: Optional[list[Optional[RoleV1]]] = Field(..., alias="roles")


class SaasFilesV2XXLQueryData(ConfiguredBaseModel):
    saas_files: Optional[list[Optional[SaasFileV2]]] = Field(..., alias="saas_files")


def query(query_func: Callable, **kwargs: Any) -> SaasFilesV2XXLQueryData:
    """
    This is a convenience function which queries and parses the data into
    concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        query_func (Callable): Function which queries your GQL Server
        kwargs: optional arguments that will be passed to the query function

    Returns:
        SaasFilesV2XXLQueryData: queried data parsed into generated classes
    """
    raw_data: dict[Any, Any] = query_func(DEFINITION, **kwargs)
    return SaasFilesV2XXLQueryData(**raw_data)
