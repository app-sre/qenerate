"""
Generated by qenerate plugin=pydantic_v2. DO NOT MODIFY MANUALLY!
"""
from collections.abc import Callable  # noqa: F401 # pylint: disable=W0611
from datetime import datetime  # noqa: F401 # pylint: disable=W0611
from enum import Enum  # noqa: F401 # pylint: disable=W0611
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    ConfigDict,
    Field,
    Json,
)


DEFINITION = """
mutation AddComment($body: String = "", $subjectId: ID = "") {
  addComment(input: {subjectId: $subjectId, body: $body}) {
    subject {
      ... on Topic {
        id
        name
      }
      ... on User {
        id
        email
      }
    }
  }
}

"""


class ConfiguredBaseModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid'
    )


class Node(ConfiguredBaseModel):
    ...


class Topic(Node):
    q_id: str = Field(..., alias="id")
    name: str = Field(..., alias="name")


class User(Node):
    q_id: str = Field(..., alias="id")
    email: str = Field(..., alias="email")


class AddCommentPayload(ConfiguredBaseModel):
    subject: Optional[Union[Topic, User, Node]] = Field(..., alias="subject")


class AddCommentMutationResponse(ConfiguredBaseModel):
    add_comment: Optional[AddCommentPayload] = Field(..., alias="addComment")


def mutate(mutation_func: Callable, **kwargs: Any) -> AddCommentMutationResponse:
    """
    This is a convenience function which executes a mutation and parses the response
    into concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        mutation_func (Callable): Function which executes the mutation.
        kwargs: Arguments that will be passed to the mutation function.
            This must include the mutation parameters.

    Returns:
        AddCommentMutationResponse: mutation response parsed into generated classes
    """
    raw_data: dict[Any, Any] = mutation_func(DEFINITION, **kwargs)
    return AddCommentMutationResponse(**raw_data)
