"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from typing import Optional, Union  # noqa: F401 # pylint: disable=W0611

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)
from my.package import (
    VaultSecret,
    VaultSecretPartial,
    ClusterAuth,
    GithubOrg,
    TerraformECR,
)


QUERY: str = """
query OCPAuthFull {
  ocp_release_mirror: ocp_release_mirror_v1 {
    hiveCluster {
      name
      serverUrl
      insecureSkipTLSVerify
      jumpHost {
        hostname
        knownHosts
        user
        port
        identity {
          ... VaultSecret
        }
      }
      managedGroups
      ocm {
        name
        url
        accessTokenClientId
        accessTokenUrl
        offlineToken {
            ... VaultSecret
        }
      }
      automationToken {
        ... VaultSecretPartial
        version
        format
      }
      internal
      disable {
        integrations
      }
      auth {
        ... ClusterAuth
        ... on ClusterAuthGithubOrg_v1 {
          org
        }
        ... on ClusterAuthGithubOrgTeam_v1 {
          ... GithubOrg
        }
      }
    }
    ecrResourcesNamespace {
      name
      managedTerraformResources
      terraformResources {
        provider
        ... on NamespaceTerraformResourceECR_v1 {
          ... TerraformECR
          output_resource_name
        }
      }
      cluster {
        name
        serverUrl
        automationToken {
          ... VaultSecretPartial
          version
          format
        }
        internal
      }
    }
  }
}

fragment VaultSecret on VaultSecret_v1 {
    path
    field
    version
    format
}
fragment VaultSecretPartial on VaultSecret_v1 {
    path
    field
}
fragment ClusterAuth on ClusterAuth_v1 {
    service
}
fragment GithubOrg on ClusterAuthGithubOrgTeam_v1 {
    org
    team
}
fragment TerraformECR on NamespaceTerraformResourceECR_v1 {
    account
    region
    identifier
}
"""


class ClusterJumpHostV1(BaseModel):
    hostname: str = Field(..., alias="hostname")
    known_hosts: str = Field(..., alias="knownHosts")
    user: str = Field(..., alias="user")
    port: Optional[int] = Field(..., alias="port")
    identity: VaultSecret = Field(..., alias="identity")

    class Config:
        smart_union = True
        extra = Extra.forbid


class OpenShiftClusterManagerV1(BaseModel):
    name: str = Field(..., alias="name")
    url: str = Field(..., alias="url")
    access_token_client_id: str = Field(..., alias="accessTokenClientId")
    access_token_url: str = Field(..., alias="accessTokenUrl")
    offline_token: VaultSecret = Field(..., alias="offlineToken")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterV1_VaultSecretV1(VaultSecretPartial):
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")

    class Config:
        smart_union = True
        extra = Extra.forbid


class DisableClusterAutomationsV1(BaseModel):
    integrations: Optional[list[str]] = Field(..., alias="integrations")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterAuthGithubOrgV1(ClusterAuth):
    org: str = Field(..., alias="org")

    class Config:
        smart_union = True
        extra = Extra.forbid


class ClusterV1(BaseModel):
    name: str = Field(..., alias="name")
    server_url: str = Field(..., alias="serverUrl")
    insecure_skip_tls_verify: Optional[bool] = Field(..., alias="insecureSkipTLSVerify")
    jump_host: Optional[ClusterJumpHostV1] = Field(..., alias="jumpHost")
    managed_groups: Optional[list[str]] = Field(..., alias="managedGroups")
    ocm: Optional[OpenShiftClusterManagerV1] = Field(..., alias="ocm")
    automation_token: Optional[ClusterV1_VaultSecretV1] = Field(..., alias="automationToken")
    internal: Optional[bool] = Field(..., alias="internal")
    disable: Optional[DisableClusterAutomationsV1] = Field(..., alias="disable")
    auth: Optional[Union[ClusterAuthGithubOrgV1, GithubOrg, ClusterAuth]] = Field(..., alias="auth")

    class Config:
        smart_union = True
        extra = Extra.forbid


class NamespaceTerraformResourceAWSV1(BaseModel):
    provider: str = Field(..., alias="provider")

    class Config:
        smart_union = True
        extra = Extra.forbid


class NamespaceTerraformResourceECRV1(NamespaceTerraformResourceAWSV1, TerraformECR):
    output_resource_name: Optional[str] = Field(..., alias="output_resource_name")

    class Config:
        smart_union = True
        extra = Extra.forbid


class NamespaceV1_ClusterV1_VaultSecretV1(VaultSecretPartial):
    version: Optional[int] = Field(..., alias="version")
    q_format: Optional[str] = Field(..., alias="format")

    class Config:
        smart_union = True
        extra = Extra.forbid


class NamespaceV1_ClusterV1(BaseModel):
    name: str = Field(..., alias="name")
    server_url: str = Field(..., alias="serverUrl")
    automation_token: Optional[NamespaceV1_ClusterV1_VaultSecretV1] = Field(..., alias="automationToken")
    internal: Optional[bool] = Field(..., alias="internal")

    class Config:
        smart_union = True
        extra = Extra.forbid


class NamespaceV1(BaseModel):
    name: str = Field(..., alias="name")
    managed_terraform_resources: Optional[bool] = Field(..., alias="managedTerraformResources")
    terraform_resources: Optional[list[Union[NamespaceTerraformResourceECRV1, NamespaceTerraformResourceAWSV1]]] = Field(..., alias="terraformResources")
    cluster: NamespaceV1_ClusterV1 = Field(..., alias="cluster")

    class Config:
        smart_union = True
        extra = Extra.forbid


class OcpReleaseMirrorV1(BaseModel):
    hive_cluster: ClusterV1 = Field(..., alias="hiveCluster")
    ecr_resources_namespace: NamespaceV1 = Field(..., alias="ecrResourcesNamespace")

    class Config:
        smart_union = True
        extra = Extra.forbid


class OCPAuthFullQueryData(BaseModel):
    ocp_release_mirror: Optional[list[OcpReleaseMirrorV1]] = Field(..., alias="ocp_release_mirror")

    class Config:
        smart_union = True
        extra = Extra.forbid
